----Start 处理器----
MODULE Processor(attacker,victim,cache,predictor,w_time)
VAR
state:{normal,squash,authfailed,predict,evict};
--time:0..100;
--isflush:{0,1};

ASSIGN
init(state):=normal;
next(state):=case
                (state=predict)&(predictor.Predict=TSuccess|predictor.Predict=NTSuccess):normal;
                (state=predict)&(predictor.Predict=TFailed|predictor.Predict=NTFailed):squash;
                state=squash:normal;
                w_time=3:evict;

                (attacker.cmd=branch|victim.cmd=branch)&victim.cmd!=flush:predict;
                TRUE:state;
              esac;
----End 处理器----

----Start Cache模块----
----包含式或者非包含式------

----Start L1 Cache模块----
MODULE L1Cache(attacker,victim,w_time)
VAR
ExistStateSC:boolean;
ExistStateOT:boolean;


ASSIGN
init(ExistStateSC):=FALSE;
init(ExistStateOT):=TRUE;



next(ExistStateSC):= case
                        victim.cmd=flush|attacker.cmd=flush:FALSE;
                        victim.cmd=load|victim.cmd=store:TRUE;
                        w_time=3:FALSE;
                        TRUE: ExistStateSC;
                     esac;

next(ExistStateOT):= case
                        attacker.cmd=flush:FALSE;
                        attacker.cmd=load|attacker.cmd=store:TRUE;
                        w_time=3:FALSE;
                        TRUE: ExistStateOT;
                     esac;
----End L1 Cache模块----

----Start L2 Cache模块----
MODULE L2Cache(attacker,victim,w_time)
VAR
ExistStateSC:boolean;
ExistStateOT:boolean;


ASSIGN
init(ExistStateSC):=FALSE;
init(ExistStateOT):=TRUE;



next(ExistStateSC):= case
                        victim.cmd=flush|attacker.cmd=flush:FALSE;
                        victim.cmd=load|victim.cmd=store:TRUE;
                        w_time=3:FALSE;
                        TRUE: ExistStateSC;
                     esac;

next(ExistStateOT):= case
                        attacker.cmd=flush:FALSE;
                        attacker.cmd=load|attacker.cmd=store:TRUE;
                        w_time=3:FALSE;
                        TRUE: ExistStateOT;
                     esac;
----End L2 Cache模块----

----Start L3 Cache模块----
MODULE L3Cache(attacker,victim,w_time)
VAR
ExistStateSC:boolean;
ExistStateOT:boolean;


ASSIGN
init(ExistStateSC):=FALSE;
init(ExistStateOT):=TRUE;



next(ExistStateSC):= case
                        victim.cmd=flush|attacker.cmd=flush:FALSE;
                        victim.cmd=load|victim.cmd=store:TRUE;
                        w_time=3:FALSE;
                        TRUE: ExistStateSC;
                     esac;

next(ExistStateOT):= case
                        attacker.cmd=flush:FALSE;
                        attacker.cmd=load|attacker.cmd=store:TRUE;
                        w_time=3:FALSE;
                        TRUE: ExistStateOT;
                     esac;
----End L1 Cache模块----
----End Cache模块----




----Start BranchPredictor模块----
MODULE Predictor(attacker,victim)
VAR
Predict:{nop,TSuccess,TFailed,NTSuccess,NTFailed};

ASSIGN
next(Predict):=case
    attacker.cmd=branch|victim.cmd=branch:{TSuccess,TFailed,NTSuccess,NTFailed};
    TRUE:nop;
esac;
----End BranchPredictor模块----


----Start ROB模块----
----乱序执行----
MODULE ROB
VAR
state:{check,commit,clear};

----End BranchPredictor模块----


----Start WriteBuffer模块----
----乱序执行----
MODULE WriteBuffer
VAR
state:{check,commit,clear};

----End WriteBuffer模块----


----Start Attacker模块----
MODULE Attacker
VAR
-- step:{flush,reload,test,end};
cmd:{nop,load,store,branch,flush};
rw_addr:{SC_addr,OT_addr};

----End Attacker模块----


----Start Victim模块----
MODULE Victim
VAR
cmd:{nop,load,store,flush};

----End WriteBuffer模块----





MODULE main
VAR
w_time:0..3;
attacker: Attacker;
victim: Victim;
cache: L1Cache(attacker,victim,w_time);
predictor:Predictor(attacker,victim);
cpu:Processor(attacker,victim,cache,predictor,w_time);


ASSIGN
init(w_time):=0;
--init(cache.ExistStateSC):=FALSE;

init(victim.cmd):={INIT_VICTIM};
init(attacker.cmd):={INIT_ATTACKER};

next(victim.cmd):=case
(cpu.state=predict)&(predictor.Predict=TFailed|predictor.Predict=NTFailed):nop;
                    cpu.state=squash|cpu.state=predict|cpu.state=authfailed:victim.cmd;
                    TRUE:{nop,load,store,flush};
                  esac;

next(attacker.cmd):=case
(cpu.state=predict)&(predictor.Predict=TFailed|predictor.Predict=NTFailed):nop;
                    cpu.state=squash|cpu.state=predict|cpu.state=authfailed:attacker.cmd;
                    cache.ExistStateSC=TRUE&victim.cmd!=flush&attacker.cmd!=flush=TRUE:{nop,load,store,branch,flush};
                     --cache.ExistStateSC=TRUE&victim.cmd!=flush&attacker.cmd!=flush=TRUE&cpu.isflush=0:{nop,load,store,flush};
                    TRUE:{nop,load,store,flush};
                  esac;


next(w_time):=case
                attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=3:3;
                attacker.cmd=store&victim.cmd!=load&victim.cmd!=store:w_time+1;
                TRUE:0;
              esac;

--FAIRNESS  !(attacker.cmd=branch & victim.cmd=flush)
--FAIRNESS  (victim.cmd=branch&attacker.cmd!=flush)
-- DEFINE
-- evict:=w_time=3;


SPEC
--!EF(E[ cpu.isflush=1 U ( (cpu.state=squash) & EX(cache.ExistStateSC=TRUE) )]   )
!EF(E[ cache.ExistStateSC=FALSE U ( (cpu.state=squash) & EX(cache.ExistStateSC=TRUE) )]   )
--!EF(cache.ExistStateSC=FALSE &E[ cache.ExistStateSC=FALSE U ( (cpu.state=squash) & EX(cache.ExistStateSC=TRUE) )]   )


