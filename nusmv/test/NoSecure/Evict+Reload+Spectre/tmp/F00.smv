MODULE Processor(attacker,victim,cache,predictor,w_time)
VAR
state:{normal,squash,authfailed,predict,evict};
--time:0..100;
--isflush:{0,1};

ASSIGN
init(state):=normal;
next(state):=case
                (state=predict)&(predictor.Predict=TSuccess|predictor.Predict=NTSuccess):normal;
                (state=predict)&(predictor.Predict=TFailed|predictor.Predict=NTFailed):squash;
                state=squash:normal;
                attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=1:evict;

                (attacker.cmd=branch|victim.cmd=branch):predict;
                TRUE:state;
              esac;



MODULE L1Cache(attacker,victim,w_time)
VAR
ExistStateSC:boolean;
ExistStateOT:boolean;


ASSIGN
init(ExistStateSC):=FALSE;
init(ExistStateOT):=TRUE;



next(ExistStateSC):= case
                        attacker.cmd=branch|victim.cmd=load|victim.cmd=store:TRUE;
                        attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=1:FALSE;
                        TRUE: ExistStateSC;
                     esac;

next(ExistStateOT):= case
                        attacker.cmd=load|attacker.cmd=store:TRUE;
                        attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=1:FALSE;
                        TRUE: ExistStateOT;
                     esac;



MODULE Predictor(attacker,victim)
VAR
Predict:{nop,TSuccess,TFailed,NTSuccess,NTFailed};

ASSIGN
next(Predict):=case
    attacker.cmd=branch|victim.cmd=branch:{TSuccess,TFailed,NTSuccess,NTFailed};
    TRUE:nop;
esac;




MODULE ROB
VAR
state:{check,commit,clear};



MODULE Attacker
VAR
-- step:{flush,reload,test,end};
cmd:{nop,load,store,branch};
rw_addr:{SC_addr,OT_addr};




MODULE Victim
VAR
cmd:{nop,load,store};


MODULE main
VAR
w_time:0..3;
attacker: Attacker;
victim: Victim;
cache: L1Cache(attacker,victim,w_time);
predictor:Predictor(attacker,victim);
cpu:Processor(attacker,victim,cache,predictor,w_time);


ASSIGN
init(w_time):=0;
--init(cache.ExistStateSC):=FALSE;

init(victim.cmd):=nop;
init(attacker.cmd):=nop;

next(victim.cmd):=case
(cpu.state=predict)&(predictor.Predict=TFailed|predictor.Predict=NTFailed):nop;
                    cpu.state=squash|cpu.state=predict|cpu.state=authfailed:victim.cmd;
                    attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=1:nop;
                    TRUE:{nop,load,store};
                  esac;

next(attacker.cmd):=case
(cpu.state=predict)&(predictor.Predict=TFailed|predictor.Predict=NTFailed):nop;
                    cpu.state=squash|cpu.state=predict|cpu.state=authfailed:attacker.cmd;
                    TRUE:{load,store,branch};
                   esac;


next(w_time):=case
                attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=2:2;
                attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=0:1;
                attacker.cmd=store&victim.cmd!=load&victim.cmd!=store&w_time=1:2;
                TRUE:0;
              esac;




-- SPEC
--!EF(E[ cpu.isflush=1 U ( (cpu.state=squash) & EX(cache.ExistStateSC=TRUE) )]   )
-- CTLGRADSPEC !EF  (E[ cache.ExistStateSC=FALSE U ( (cpu.state=squash) & EX(cache.ExistStateSC=TRUE) )]   )


-- CTLGRADSPEC !EF 5 (cache.ExistStateSC=FALSE & E[ cache.ExistStateSC=FALSE U ( (cpu.state=squash) & EX(cache.ExistStateSC=TRUE) )])
CTLGRADSPEC !EF 100 ( (w_time=2) & EX(attacker.cmd=branch & cache.ExistStateSC=FALSE & EX( ((cpu.state=predict) & (predictor.Predict=TFailed|predictor.Predict=NTFailed) ) & EX(cpu.state=squash & EX(cache.ExistStateSC=TRUE) )  )) )


