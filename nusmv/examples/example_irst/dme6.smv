MODULE and-gate(in1,in2)
VAR
  out : boolean;
ASSIGN
  init(out) := 0;
  next(out) := (in1 & in2) union out;

MODULE and-gate-init(in1,in2,init-out)
VAR
  out : boolean;
ASSIGN
  init(out) := init-out;
  next(out) := (in1 & in2) union out;

MODULE or-gate(in1,in2)
VAR
  out : boolean;
ASSIGN
  init(out) := 0;
  next(out) := (in1 | in2) union out;

MODULE c-element(in1,in2)
VAR
  out : boolean;
ASSIGN
  init(out) := 0;
  next(out) := 
    case
      in1 = in2 : in1 union out;
      1 : out;
    esac;

MODULE mutex-half(inp,other-out)
VAR
  out : boolean;
ASSIGN
  init(out) := 0;
  next(out) := inp union out;
TRANS
  !(next(out) & next(other-out))

MODULE user
VAR
  req : boolean;
ASSIGN
  init(req) := 0;
  next(req) := (!ack) union req;

MODULE cell(left,right,token)
VAR
  u : user;
  a : mutex-half(u.req,b.out);
  b : mutex-half(left.req,a.out);
  c : and-gate(a.out,!left.ack);
  d : and-gate(b.out,!u.ack);
  g : or-gate(c.out,d.out);
  e : c-element(c.out,i.out);
  f : c-element(d.out,i.out);
  h : c-element(g.out,j.out);
  k : and-gate(g.out,!h.out);
  i : and-gate(h.out,!j.out);
  l : and-gate(k.out,m.out);
  j : or-gate(l.out,ack);
  p : and-gate(k.out,n.out);
  n : and-gate-init(!e.out,!m.out,!token);
  m : and-gate-init(!f.out,!n.out,token);
  r : and-gate(e.out,m.out);
  q : and-gate(f.out,n.out);
DEFINE
  req := p.out;
  left.ack := q.out;
  u.ack := r.out;

MODULE main
VAR
  e-06 : process cell(e-01,e-02,1);
  e-05 : process cell(e-06,e-01,0);
  e-04 : process cell(e-05,e-06,0);
  e-03 : process cell(e-04,e-05,1);
  e-02 : process cell(e-03,e-04,0);
  e-01 : process cell(e-02,e-03,0);
  e-16 : process cell(e-11,e-12,1);
  e-15 : process cell(e-16,e-11,0);
  e-14 : process cell(e-15,e-16,0);
  e-13 : process cell(e-14,e-15,1);
  e-12 : process cell(e-13,e-14,0);
  e-11 : process cell(e-12,e-13,0);

SPEC
  AG (

      !(e-11.u.ack & e-12.u.ack)

      & !(e-11.u.ack & e-13.u.ack)
      & !(e-12.u.ack & e-13.u.ack)
     )
