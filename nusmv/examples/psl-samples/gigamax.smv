MODULE cache-device

VAR
  state : {invalid,shared,owned};


DEFINE
  readable := ((state = shared) | (state = owned)) & !waiting;
  writable := (state = owned) & !waiting;

ASSIGN
  init(state) := invalid;
  next(state) :=
    case
      abort : state;
      master :
        case
          CMD = read-shared        : shared;
          CMD = read-owned         : owned;
          CMD = write-invalid      : invalid;
          CMD = write-resp-invalid : invalid;
          CMD = write-shared       : shared;
          CMD = write-resp-shared  : shared;
          1 : state;
        esac;
      !master & state = shared & (CMD = read-owned | CMD = invalidate) :
         invalid;
      state = shared : {shared,invalid};
      1 : state;
    esac;

DEFINE
  reply-owned := !master & state = owned;

VAR
  snoop : {invalid,owned,shared};

ASSIGN
  init(snoop) := invalid;
  next(snoop) := 
    case
      abort : snoop;
      !master & state = owned & CMD = read-shared : shared;
      !master & state = owned & CMD = read-shared : owned;
      master & CMD = write-resp-invalid : invalid;
      master & CMD = write-resp-shared  : invalid;
      1 : snoop;
    esac;

MODULE bus-device

VAR
  master  : boolean;
  cmd : {idle,read-shared,read-owned,write-invalid,write-shared,
	 write-resp-invalid,write-resp-shared,invalidate,response};
  waiting : boolean;
  reply-stall : boolean;

ASSIGN
  init(waiting) := 0;
  next(waiting) :=
    case
      abort : waiting;
      master  & CMD = read-shared        : 1;
      master  & CMD = read-owned         : 1;
      !master & CMD = response           : 0;
      !master & CMD = write-resp-invalid : 0;
      !master & CMD = write-resp-shared  : 0;
      1 : waiting;
    esac;

DEFINE
  reply-waiting := !master & waiting;
  abort := REPLY-STALL
           | ((CMD = read-shared | CMD = read-owned) & REPLY-WAITING);

MODULE processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL)
ISA bus-device
ISA cache-device

ASSIGN
  cmd :=
    case
      master & state = invalid : {read-shared,read-owned};
      master & state = shared  : read-owned;
      master & state = owned & snoop = owned : write-resp-invalid;
      master & state = owned & snoop = shared : write-resp-shared;
      master & state = owned & snoop = invalid : write-invalid;
      1 : idle;
    esac;

MODULE memory(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL)
VAR
  master : boolean;
  cmd : {idle,read-shared,read-owned,write-invalid,write-shared,
	 write-resp-invalid,write-resp-shared,invalidate,response};
  busy : boolean;
  reply-stall : boolean;


DEFINE
  reply-owned := 0;
  reply-waiting := 0;
  abort := REPLY-STALL
          | (CMD = read-shared | CMD = read-owned) & REPLY-WAITING
	  | (CMD = read-shared | CMD = read-owned) & REPLY-OWNED;

ASSIGN
  init(busy) := 0;
  next(busy) :=
    case
      abort : busy;
      master & CMD = response : 0;
      !master & (CMD = read-owned | CMD = read-shared) : 1;
      1 : busy;
    esac;
  cmd :=
    case
      master & busy : {response,idle};
      1 : idle;
    esac;
  reply-stall :=
    case
      busy & (CMD = read-shared | CMD = read-owned
	      | CMD = write-invalid | CMD = write-shared
	      | CMD = write-resp-invalid | CMD = write-resp-shared) : 1;
      1 : {0,1};
    esac;

MODULE main
VAR
  CMD : {idle,read-shared,read-owned,write-invalid,write-shared,
	   write-resp-invalid,write-resp-shared,invalidate,response};
  p[0] : processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);
  p[1] : processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);
  p[2] : processor(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);
  m : memory(CMD,REPLY-OWNED,REPLY-WAITING,REPLY-STALL);

DEFINE
  REPLY-OWNED := p[0].reply-owned | p[1].reply-owned | p[2].reply-owned;
  REPLY-WAITING := p[0].reply-waiting | p[1].reply-waiting | p[2].reply-waiting;
  REPLY-STALL := p[0].reply-stall | p[1].reply-stall | p[2].reply-stall |
	         m.reply-stall;

ASSIGN
  CMD := 
    case
      p[1].cmd = idle & p[2].cmd = idle & m.cmd = idle : p[0].cmd;
      p[0].cmd = idle & p[2].cmd = idle & m.cmd = idle : p[1].cmd;
      p[0].cmd = idle & p[1].cmd = idle & m.cmd = idle : p[2].cmd;
      p[0].cmd = idle & p[1].cmd = idle & p[2].cmd = idle : m.cmd;
      1 : {idle,read-shared,read-owned,write-invalid,write-shared,
	   write-resp-invalid,write-resp-shared,invalidate,response};
    esac;

ASSIGN
  p[0].master := {0,1};
  p[1].master :=
    case
      p[0].master : 0;
      1 : {0,1};
    esac;
  p[2].master :=
    case
      p[0].master | p[1].master : 0;
      1 : {0,1};
    esac;
  m.master :=
    case
      p[0].master | p[1].master | p[2].master : 0;
      1 : {0,1};
    esac;

SPEC
  AG EF (p[0].readable)

SPEC
  AG EF (p[0].writable)

SPEC
  AG !(p[0].writable & p[1].writable)

PSLSPEC
  AG EF (p[0].readable);

PSLSPEC
  AG EF (p[0].writable);

PSLSPEC
  AG EF (p[1].readable);

PSLSPEC
  AG EF (p[1].writable);

PSLSPEC
  AG EF (p[2].readable);

PSLSPEC
  AG EF (p[2].writable);

PSLSPEC
  AG forall i in {0:2}: EF p[i].readable;

PSLSPEC
  AG forall i in {0:2}: EF p[i].writable;

PSLSPEC
  AG !(p[0].writable & p[1].writable);

PSLSPEC
  never (p[0].writable & p[1].writable);

PSLSPEC
  always !(p[0].writable & p[1].writable);

PSLSPEC
  never forall i in {0:1}: p[i].writable;

PSLSPEC
  never forall i in {1:2}: p[i].writable;

PSLSPEC
  never forall i in {0,2}: p[i].writable;

