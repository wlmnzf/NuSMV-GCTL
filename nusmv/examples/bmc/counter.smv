-- A simple counter where y non-deterministically goes either from 0 to 3 (and then back to 0)
-- or from o to 7 (and then back to 0).
-- x changes its value (from 0 to 1 or viceversa) whenever y reaches 7.

MODULE main
VAR
  x : 0..1;
  y : 0..7;  
ASSIGN
  init(y) := 0;
  init(x) := 0;
  
TRANS
  case
    y = 3 :  (next(x) = x)             & (next(y) = 0 | next(y)=4);
    y = 7 :  (next(x) = (x + 1) mod 2) & (next(y) = 0);
    1     :  (next(x) = x)             & (next(y) = y + 1);
  esac


-- SPECIFICATION:
-- Whenever y starts being definitely smaller than 4
-- (the counter starts moving from 3 back to 0 at every cycle), then 
-- y has never been greater than 3 in the past.

LTLSPEC
G ( (G y<=3) -> ! O y>3 )

LTLSPEC G y = 0 



-- This specification shows the use of past operators 
-- (with the new semantics) on false specifications of the form 
-- "G something", where the counterexample is a loop path.
